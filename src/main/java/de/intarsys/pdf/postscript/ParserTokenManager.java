/*
 * Copyright (c) 2007, intarsys consulting GmbH
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of intarsys nor the names of its contributors may be used
 *   to endorse or promote products derived from this software without specific
 *   prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package de.intarsys.pdf.postscript;

public class ParserTokenManager implements ParserConstants {
	static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL };

	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	static final long[] jjbitVec3 = { 0x1ff00000fffffffeL, 0xffffffffffffc000L,
			0xffffffffL, 0x600000000000000L };

	static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };

	static final long[] jjbitVec5 = { 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL };

	static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffL, 0x0L };

	static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0x0L, 0x0L };

	static final long[] jjbitVec8 = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };

	static final int[] jjnextStates = { 33, 7, 54, 55, 60, 61, 64, 65, 13, 33,
			4, 34, 40, 45, 49, 15, 16, 18, 9, 10, 13, 15, 16, 20, 18, 36, 37,
			13, 41, 42, 13, 49, 50, 13, 56, 57, 13, 64, 65, 13, 2, 3, 11, 12,
			17, 19, 21, 38, 39, 43, 44, 47, 48, 51, 52, 58, 59, 62, 63, 66, 67, };

	public static final String[] jjstrLiteralImages = { "", null, null, null,
			null, null, null, null, null, null, null, null, null, null, "\173",
			"\175", "\133", "\135", };

	static final long[] jjtoSkip = { 0x6L, };

	static final long[] jjtoToken = { 0x3cf49L, };

	public static final String[] lexStateNames = { "DEFAULT", };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec2[i2] & l2) != 0L);
		default:
			if ((jjbitVec0[i1] & l1) != 0L) {
				return true;
			}
			return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec4[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec5[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec6[i2] & l2) != 0L);
		case 51:
			return ((jjbitVec7[i2] & l2) != 0L);
		case 61:
			return ((jjbitVec8[i2] & l2) != 0L);
		default:
			if ((jjbitVec3[i1] & l1) != 0L) {
				return true;
			}
			return false;
		}
	}

	protected char curChar;

	int curLexState = 0;

	public java.io.PrintStream debugStream = System.out;

	int defaultLexState = 0;

	protected JavaCharStream input_stream;

	int jjmatchedKind;

	int jjmatchedPos;

	int jjnewStateCnt;

	int jjround;

	private final int[] jjrounds = new int[68];

	private final int[] jjstateSet = new int[136];

	public ParserTokenManager(JavaCharStream stream) {
		if (JavaCharStream.staticFlag) {
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		}
		input_stream = stream;
	}

	public ParserTokenManager(JavaCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public Token getNextToken() {
		// int kind;
		// Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if ((jjmatchedPos + 1) < curPos) {
					input_stream.backup(curPos - jjmatchedPos - 1);
				}
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = (curPos <= 1) ? "" : input_stream.GetImage();
				if ((curChar == '\n') || (curChar == '\r')) {
					error_line++;
					error_column = 0;
				} else {
					error_column++;
				}
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = (curPos <= 1) ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
					error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	private final int jjMoveNfa_0(int startState, int curPos) {
		// int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 68;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 3) {
								kind = 3;
							}
							jjCheckNAddStates(0, 8);
						} else if ((0x100003600L & l) != 0L) {
							if (kind > 1) {
								kind = 1;
							}
						} else if (curChar == 45) {
							jjCheckNAddStates(9, 14);
						} else if (curChar == 47) {
							jjstateSet[jjnewStateCnt++] = 28;
						} else if (curChar == 36) {
							if (kind > 9) {
								kind = 9;
							}
							jjCheckNAdd(24);
						} else if (curChar == 40) {
							jjCheckNAddStates(15, 17);
						} else if (curChar == 46) {
							jjCheckNAdd(9);
						} else if (curChar == 37) {
							jjCheckNAddTwoStates(2, 3);
						}
						if (curChar == 47) {
							jjstateSet[jjnewStateCnt++] = 26;
						} else if (curChar == 48) {
							jjstateSet[jjnewStateCnt++] = 5;
						}
						break;
					case 1:
						if (curChar == 37) {
							jjCheckNAddTwoStates(2, 3);
						}
						break;
					case 2:
						if ((0xfffffffffffffbffL & l) != 0L) {
							jjCheckNAddTwoStates(2, 3);
						}
						break;
					case 3:
						if ((curChar == 10) && (kind > 2)) {
							kind = 2;
						}
						break;
					case 4:
						if (curChar == 48) {
							jjstateSet[jjnewStateCnt++] = 5;
						}
						break;
					case 6:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 3) {
							kind = 3;
						}
						jjCheckNAddTwoStates(6, 7);
						break;
					case 8:
						if (curChar == 46) {
							jjCheckNAdd(9);
						}
						break;
					case 9:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddStates(18, 20);
						break;
					case 11:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(12);
						}
						break;
					case 12:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddTwoStates(12, 13);
						break;
					case 14:
						if (curChar == 40) {
							jjCheckNAddStates(15, 17);
						}
						break;
					case 15:
						if ((0xfffffdffffffdbffL & l) != 0L) {
							jjCheckNAddStates(15, 17);
						}
						break;
					case 17:
						if ((0x28000000400L & l) != 0L) {
							jjCheckNAddStates(15, 17);
						}
						break;
					case 18:
						if ((curChar == 41) && (kind > 8)) {
							kind = 8;
						}
						break;
					case 19:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(21, 24);
						}
						break;
					case 20:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAddStates(15, 17);
						}
						break;
					case 21:
						if ((0xf000000000000L & l) != 0L) {
							jjstateSet[jjnewStateCnt++] = 22;
						}
						break;
					case 22:
						if ((0xff000000000000L & l) != 0L) {
							jjCheckNAdd(20);
						}
						break;
					case 23:
						if (curChar != 36) {
							break;
						}
						if (kind > 9) {
							kind = 9;
						}
						jjCheckNAdd(24);
						break;
					case 24:
						if ((0x3ff601000000000L & l) == 0L) {
							break;
						}
						if (kind > 9) {
							kind = 9;
						}
						jjCheckNAdd(24);
						break;
					case 25:
						if (curChar == 47) {
							jjstateSet[jjnewStateCnt++] = 26;
						}
						break;
					case 26:
						if (curChar != 36) {
							break;
						}
						if (kind > 10) {
							kind = 10;
						}
						jjCheckNAdd(27);
						break;
					case 27:
						if ((0x3ff601000000000L & l) == 0L) {
							break;
						}
						if (kind > 10) {
							kind = 10;
						}
						jjCheckNAdd(27);
						break;
					case 28:
						if (curChar == 47) {
							jjstateSet[jjnewStateCnt++] = 29;
						}
						break;
					case 29:
						if (curChar != 36) {
							break;
						}
						if (kind > 11) {
							kind = 11;
						}
						jjCheckNAdd(30);
						break;
					case 30:
						if ((0x3ff601000000000L & l) == 0L) {
							break;
						}
						if (kind > 11) {
							kind = 11;
						}
						jjCheckNAdd(30);
						break;
					case 31:
						if (curChar == 47) {
							jjstateSet[jjnewStateCnt++] = 28;
						}
						break;
					case 32:
						if (curChar == 45) {
							jjCheckNAddStates(9, 14);
						}
						break;
					case 33:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 3) {
							kind = 3;
						}
						jjCheckNAddTwoStates(33, 7);
						break;
					case 34:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(34, 35);
						}
						break;
					case 35:
						if (curChar != 46) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddStates(25, 27);
						break;
					case 36:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddStates(25, 27);
						break;
					case 38:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(39);
						}
						break;
					case 39:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddTwoStates(39, 13);
						break;
					case 40:
						if (curChar == 46) {
							jjCheckNAdd(41);
						}
						break;
					case 41:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddStates(28, 30);
						break;
					case 43:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(44);
						}
						break;
					case 44:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddTwoStates(44, 13);
						break;
					case 45:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(45, 46);
						}
						break;
					case 47:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(48);
						}
						break;
					case 48:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddTwoStates(48, 13);
						break;
					case 49:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(31, 33);
						}
						break;
					case 51:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(52);
						}
						break;
					case 52:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(52, 13);
						}
						break;
					case 53:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 3) {
							kind = 3;
						}
						jjCheckNAddStates(0, 8);
						break;
					case 54:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(54, 55);
						}
						break;
					case 55:
						if (curChar != 46) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddStates(34, 36);
						break;
					case 56:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddStates(34, 36);
						break;
					case 58:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(59);
						}
						break;
					case 59:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddTwoStates(59, 13);
						break;
					case 60:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(60, 61);
						}
						break;
					case 62:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(63);
						}
						break;
					case 63:
						if ((0x3ff000000000000L & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAddTwoStates(63, 13);
						break;
					case 64:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddStates(37, 39);
						}
						break;
					case 66:
						if ((0x280000000000L & l) != 0L) {
							jjCheckNAdd(67);
						}
						break;
					case 67:
						if ((0x3ff000000000000L & l) != 0L) {
							jjCheckNAddTwoStates(67, 13);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
					case 24:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 9) {
							kind = 9;
						}
						jjCheckNAdd(24);
						break;
					case 2:
						jjAddStates(40, 41);
						break;
					case 5:
						if ((0x100000001000000L & l) != 0L) {
							jjCheckNAdd(6);
						}
						break;
					case 6:
						if ((0x7e0000007eL & l) == 0L) {
							break;
						}
						if (kind > 3) {
							kind = 3;
						}
						jjCheckNAddTwoStates(6, 7);
						break;
					case 7:
						if (((0x100000001000L & l) != 0L) && (kind > 3)) {
							kind = 3;
						}
						break;
					case 10:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(42, 43);
						}
						break;
					case 13:
						if (((0x5000000050L & l) != 0L) && (kind > 6)) {
							kind = 6;
						}
						break;
					case 15:
						if ((0xffffffffefffffffL & l) != 0L) {
							jjCheckNAddStates(15, 17);
						}
						break;
					case 16:
						if (curChar == 92) {
							jjAddStates(44, 46);
						}
						break;
					case 17:
						if ((0x14404410000000L & l) != 0L) {
							jjCheckNAddStates(15, 17);
						}
						break;
					case 26:
					case 27:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 10) {
							kind = 10;
						}
						jjCheckNAdd(27);
						break;
					case 29:
					case 30:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 11) {
							kind = 11;
						}
						jjCheckNAdd(30);
						break;
					case 37:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(47, 48);
						}
						break;
					case 42:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(49, 50);
						}
						break;
					case 46:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(51, 52);
						}
						break;
					case 50:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(53, 54);
						}
						break;
					case 57:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(55, 56);
						}
						break;
					case 61:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(57, 58);
						}
						break;
					case 65:
						if ((0x2000000020L & l) != 0L) {
							jjAddStates(59, 60);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
					case 24:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 9) {
							kind = 9;
						}
						jjCheckNAdd(24);
						break;
					case 2:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(40, 41);
						}
						break;
					case 15:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							jjAddStates(15, 17);
						}
						break;
					case 26:
					case 27:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 10) {
							kind = 10;
						}
						jjCheckNAdd(27);
						break;
					case 29:
					case 30:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							break;
						}
						if (kind > 11) {
							kind = 11;
						}
						jjCheckNAdd(30);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 91:
			return jjStopAtPos(0, 16);
		case 93:
			return jjStopAtPos(0, 17);
		case 123:
			return jjStopAtPos(0, 14);
		case 125:
			return jjStopAtPos(0, 15);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		default:
			return -1;
		}
	}

	public void ReInit(JavaCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	public void ReInit(JavaCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 68; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	public void SwitchTo(int lexState) {
		if ((lexState >= 1) || (lexState < 0)) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		} else {
			curLexState = lexState;
		}
	}
}
